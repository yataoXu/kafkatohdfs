xu#数据读取与保存
  	Spark的数据读取及数据保存可以从两个维度来作区分：文件格式以及文件系统。
  文件格式分为：Text文件、Json文件、Csv文件、Sequence文件以及Object文件；
  文件系统分为：本地文件系统、HDFS、HBASE以及数据库。
  ## 文件类数据读取与保存
  ### Text文件
  1. 数据读取:textFile(String)
  ```
  scala> val hdfsFile = sc.textFile("hdfs://hadoop102:9000/fruit.txt")
  hdfsFile: org.apache.spark.rdd.RDD[String] = hdfs://hadoop102:9000/fruit.txt MapPartitionsRDD[21] at textFile at <console>:24
  ```
  2. 数据保存: saveAsTextFile(String)
  ```
  scala> hdfsFile.saveAsTextFile("/fruitOut")
  ```
  ### Json文件
  如果JSON文件中每一行就是一个JSON记录，那么可以通过将JSON文件当做文本文件来读取，然后利用相关的JSON库对每一条数据进行JSON解析。
  注意：使用RDD读取JSON文件处理很复杂，同时SparkSQL集成了很好的处理JSON文件的方式，所以应用中多是采用SparkSQL处理JSON文件。
  1. 导入解析json所需的包
  ```
  scala> import scala.util.parsing.json.JSON
  ```
  2. 上传json文件到HDFS
  ```
  [atguigu@hadoop102 spark]$ hadoop fs -put ./examples/src/main/resources/people.json /
  ```
  3. 读取文件
  ```
  scala> val json = sc.textFile("/people.json")
  json: org.apache.spark.rdd.RDD[String] = /people.json MapPartitionsRDD[8] at textFile at <console>:24
  ```
  4. 解析json数据
  ```
  scala> val result  = json.map(JSON.parseFull)
  result: org.apache.spark.rdd.RDD[Option[Any]] = MapPartitionsRDD[10] at map at <console>:27
  ```
  5. 打印
  ```
  scala> result.collect
  res11: Array[Option[Any]] = Array(Some(Map(name -> Michael)), Some(Map(name -> Andy, age -> 30.0)), Some(Map(name -> Justin, age -> 19.0)))
  ```
  ### Sequence文件
   SequenceFile文件是Hadoop用来存储二进制形式的key-value对而设计的一种平面文件(Flat File)。Spark 有专门用来读取 SequenceFile 的接口。在 SparkContext 中，可以调用 sequenceFile[ keyClass, valueClass](path)。
  注意：SequenceFile文件只针对PairRDD
  1. 创建一个RDD
  ```
  scala> val rdd = sc.parallelize(Array((1,2),(3,4),(5,6)))
  rdd: org.apache.spark.rdd.RDD[(Int, Int)] = ParallelCollectionRDD[13] at parallelize at <console>:24
  ```
  2. 将RDD保存为Sequence文件
  ```
  scala> rdd.saveAsSequenceFile("file:///opt/module/spark/seqFile")
  ```
  3. 查看该文件
  ```
  [atguigu@hadoop102 seqFile]$ pwd
  /opt/module/spark/seqFile

  [atguigu@hadoop102 seqFile]$ ll
  总用量 8
  -rw-r--r-- 1 atguigu atguigu 108 10月  9 10:29 part-00000
  -rw-r--r-- 1 atguigu atguigu 124 10月  9 10:29 part-00001
  -rw-r--r-- 1 atguigu atguigu   0 10月  9 10:29 _SUCCESS

  [atguigu@hadoop102 seqFile]$ cat part-00000
  SEQ org.apache.hadoop.io.IntWritable org.apache.hadoop.io.IntWritableط
  ```
  4. 读取Sequence文件
  ```
  scala> val seq = sc.sequenceFile[Int,Int]("file:///opt/module/spark/seqFile")
  seq: org.apache.spark.rdd.RDD[(Int, Int)] = MapPartitionsRDD[18] at sequenceFile at <console>:24
  ```
  5. 打印读取后的Sequence文件
  ```
  scala> seq.collect
  res14: Array[(Int, Int)] = Array((1,2), (3,4), (5,6))
  ```
  ### 对象文件
  对象文件是将对象序列化后保存的文件，采用Java的序列化机制。可以通过objectFile[k,v](path) 函数接收一个路径，读取对象文件，返回对应的 RDD，也可以通过调用saveAsObjectFile() 实现对对象文件的输出。因为是序列化所以要指定类型。
  1. 创建一个RDD
  ```
  scala> val rdd = sc.parallelize(Array(1,2,3,4))
  rdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[19] at parallelize at <console>:24
  ```
  2. 将RDD保存为Object文件
  ```
  scala> rdd.saveAsObjectFile("file:///opt/module/spark/objectFile")
  ```
  3. 查看该文件
  ```
  [atguigu@hadoop102 objectFile]$ pwd
  /opt/module/spark/objectFile

  [atguigu@hadoop102 objectFile]$ ll
  总用量 8
  -rw-r--r-- 1 atguigu atguigu 142 10月  9 10:37 part-00000
  -rw-r--r-- 1 atguigu atguigu 142 10月  9 10:37 part-00001
  -rw-r--r-- 1 atguigu atguigu   0 10月  9 10:37 _SUCCESS

  [atguigu@hadoop102 objectFile]$ cat part-00000
  SEQ!org.apache.hadoop.io.NullWritable"org.apache.hadoop.io.BytesWritableW@`l
  ```
  4. 读取Object文件
  ```
  scala> val objFile = sc.objectFile[Int]("file:///opt/module/spark/objectFile")
  objFile: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[31] at objectFile at <console>:24
  ```
  5. 打印读取后的Sequence文件
  ```
  scala> objFile.collect
  res19: Array[Int] = Array(1, 2, 3, 4)
  ```
  ## 文件系统类数据读取与保存
  ### HDFS
  Spark的整个生态系统与Hadoop是完全兼容的,所以对于Hadoop所支持的文件类型或者数据库类型,Spark也同样支持.另外,由于Hadoop的API有新旧两个版本,所以Spark为了能够兼容Hadoop所有的版本,也提供了两套创建操作接口.对于外部存储创建操作而言,hadoopRDD和newHadoopRDD是最为抽象的两个函数接口,主要包含以下四个参数.
  1. 输入格式(InputFormat): 制定数据输入的类型,如TextInputFormat等,新旧两个版本所引用的版本分别是org.apache.hadoop.mapred.InputFormat和org.apache.hadoop.mapreduce.InputFormat(NewInputFormat)
  2. 键类型: 指定[K,V]键值对中K的类型
  3. 值类型: 指定[K,V]键值对中V的类型
  4. 分区值: 指定由外部存储生成的RDD的partition数量的最小值,如果没有指定,系统会使用默认值defaultMinSplits
  注意:其他创建操作的API接口都是为了方便最终的Spark程序开发者而设置的,是这两个接口的高效实现版本.例如,对于textFile而言,只有path这个指定文件路径的参数,其他参数在系统内部指定了默认值。
  1. 在Hadoop中以压缩形式存储的数据,不需要指定解压方式就能够进行读取,因为Hadoop本身有一个解压器会根据压缩文件的后缀推断解压算法进行解压.
  2. 如果用Spark从Hadoop中读取某种类型的数据不知道怎么读取的时候,上网查找一个使用map-reduce的时候是怎么读取这种这种数据的,然后再将对应的读取方式改写成上面的hadoopRDD和newAPIHadoopRDD两个类就行了
  ### MySQL数据库连接
  支持通过Java JDBC访问关系型数据库。需要通过JdbcRDD进行，示例如下:
  1. 添加依赖
  ```
  <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.27</version>
  </dependency>
  ```
  2. Mysql读取：
  ```
  package com.atguigu

  import java.sql.DriverManager

  import org.apache.spark.rdd.JdbcRDD
  import org.apache.spark.{SparkConf, SparkContext}

  object MysqlRDD {

   def main(args: Array[String]): Unit = {

     //1.创建spark配置信息
     val sparkConf: SparkConf = new SparkConf().setMaster("local[*]").setAppName("JdbcRDD")

     //2.创建SparkContext
     val sc = new SparkContext(sparkConf)

     //3.定义连接mysql的参数
     val driver = "com.mysql.jdbc.Driver"
     val url = "jdbc:mysql://hadoop102:3306/rdd"
     val userName = "root"
     val passWd = "000000"

     //创建JdbcRDD
     val rdd = new JdbcRDD(sc, () => {
       Class.forName(driver)
       DriverManager.getConnection(url, userName, passWd)
     },
       "select * from `rddtable` where `id`>=?;",
       1,
       10,
       1,
       r => (r.getInt(1), r.getString(2))
     )

     //打印最后结果
     println(rdd.count())
     rdd.foreach(println)

     sc.stop()
   }
  }
  ```
  Mysql写入：
  ```
  def main(args: Array[String]) {
    val sparkConf = new SparkConf().setMaster("local[2]").setAppName("HBaseApp")
    val sc = new SparkContext(sparkConf)
    val data = sc.parallelize(List("Female", "Male","Female"))

    data.foreachPartition(insertData)
  }

  def insertData(iterator: Iterator[String]): Unit = {
  Class.forName ("com.mysql.jdbc.Driver").newInstance()
    val conn = java.sql.DriverManager.getConnection("jdbc:mysql://hadoop102:3306/rdd", "root", "000000")
    iterator.foreach(data => {
      val ps = conn.prepareStatement("insert into rddtable(name) values (?)")
      ps.setString(1, data)
      ps.executeUpdate()
    })
  }
  ```
  ### HBase数据库
  由于 org.apache.hadoop.hbase.mapreduce.TableInputFormat 类的实现，Spark 可以通过Hadoop输入格式访问HBase。这个输入格式会返回键值对数据，其中键的类型为org. apache.hadoop.hbase.io.ImmutableBytesWritable，而值的类型为org.apache.hadoop.hbase.client.
  Result。
  1. 添加依赖
  ```
  <dependency>
  	<groupId>org.apache.hbase</groupId>
  	<artifactId>hbase-server</artifactId>
  	<version>1.3.1</version>
  </dependency>

  <dependency>
  	<groupId>org.apache.hbase</groupId>
  	<artifactId>hbase-client</artifactId>
  	<version>1.3.1</version>
  </dependency>
  ```
  2. 从HBase读取数据
  ```
  package com.atguigu

  import org.apache.hadoop.conf.Configuration
  import org.apache.hadoop.hbase.HBaseConfiguration
  import org.apache.hadoop.hbase.client.Result
  import org.apache.hadoop.hbase.io.ImmutableBytesWritable
  import org.apache.hadoop.hbase.mapreduce.TableInputFormat
  import org.apache.spark.rdd.RDD
  import org.apache.spark.{SparkConf, SparkContext}
  import org.apache.hadoop.hbase.util.Bytes

  object HBaseSpark {

    def main(args: Array[String]): Unit = {

      //创建spark配置信息
      val sparkConf: SparkConf = new SparkConf().setMaster("local[*]").setAppName("JdbcRDD")

      //创建SparkContext
      val sc = new SparkContext(sparkConf)

      //构建HBase配置信息
      val conf: Configuration = HBaseConfiguration.create()
      conf.set("hbase.zookeeper.quorum", "hadoop102,hadoop103,hadoop104")
      conf.set(TableInputFormat.INPUT_TABLE, "rddtable")

      //从HBase读取数据形成RDD
      val hbaseRDD: RDD[(ImmutableBytesWritable, Result)] = sc.newAPIHadoopRDD(
        conf,
        classOf[TableInputFormat],
        classOf[ImmutableBytesWritable],
        classOf[Result])

      val count: Long = hbaseRDD.count()
      println(count)

      //对hbaseRDD进行处理
      hbaseRDD.foreach {
        case (_, result) =>
          val key: String = Bytes.toString(result.getRow)
          val name: String = Bytes.toString(result.getValue(Bytes.toBytes("info"), Bytes.toBytes("name")))
          val color: String = Bytes.toString(result.getValue(Bytes.toBytes("info"), Bytes.toBytes("color")))
          println("RowKey:" + key + ",Name:" + name + ",Color:" + color)
      }

      //关闭连接
      sc.stop()
    }

  }
  ```
  3. 往HBase写入

  ```

  def main(args: Array[String]) {
  //获取Spark配置信息并创建与spark的连接
    val sparkConf = new SparkConf().setMaster("local[*]").setAppName("HBaseApp")
    val sc = new SparkContext(sparkConf)

  //创建HBaseConf
    val conf = HBaseConfiguration.create()
    val jobConf = new JobConf(conf)
    jobConf.setOutputFormat(classOf[TableOutputFormat])
    jobConf.set(TableOutputFormat.OUTPUT_TABLE, "fruit_spark")

  //构建Hbase表描述器
    val fruitTable = TableName.valueOf("fruit_spark")
    val tableDescr = new HTableDescriptor(fruitTable)
    tableDescr.addFamily(new HColumnDescriptor("info".getBytes))

  //创建Hbase表
    val admin = new HBaseAdmin(conf)
    if (admin.tableExists(fruitTable)) {
      admin.disableTable(fruitTable)
      admin.deleteTable(fruitTable)
    }
    admin.createTable(tableDescr)

  //定义往Hbase插入数据的方法
    def convert(triple: (Int, String, Int)) = {
      val put = new Put(Bytes.toBytes(triple._1))
      put.addImmutable(Bytes.toBytes("info"), Bytes.toBytes("name"), Bytes.toBytes(triple._2))
      put.addImmutable(Bytes.toBytes("info"), Bytes.toBytes("price"), Bytes.toBytes(triple._3))
      (new ImmutableBytesWritable, put)
    }

  //创建一个RDD
    val initialRDD = sc.parallelize(List((1,"apple",11), (2,"banana",12), (3,"pear",13)))

  //将RDD内容写到HBase
    val localData = initialRDD.map(convert)

    localData.saveAsHadoopDataset(jobConf)
  }
  ```
  # RDD编程进阶
  ## 累加器
  累加器用来对信息进行聚合，通常在向 Spark传递函数时，比如使用 map() 函数或者用 filter() 传条件时，可以使用驱动器程序中定义的变量，但是集群中运行的每个任务都会得到这些变量的一份新的副本，更新这些副本的值也不会影响驱动器中的对应变量。如果我们想实现所有分片处理时更新共享变量的功能，那么累加器可以实现我们想要的效果。
  ### 系统累加器
  针对一个输入的日志文件，如果我们想计算文件中所有空行的数量，我们可以编写以下程序：
  scala> val notice = sc.textFile("./NOTICE")
  notice: org.apache.spark.rdd.RDD[String] = ./NOTICE MapPartitionsRDD[40] at textFile at <console>:32

  scala> val blanklines = sc.accumulator(0)
  warning: there were two deprecation warnings; re-run with -deprecation for details
  blanklines: org.apache.spark.Accumulator[Int] = 0

  scala> val tmp = notice.flatMap(line => {
       |    if (line == "") {
       |       blanklines += 1
       |    }
       |    line.split(" ")
       | })
  tmp: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[41] at flatMap at <console>:36

  scala> tmp.count()
  res31: Long = 3213

  scala> blanklines.value
  res32: Int = 171
  累加器的用法如下所示。
  通过在驱动器中调用SparkContext.accumulator(initialValue)方法，创建出存有初始值的累加器。返回值为 org.apache.spark.Accumulator[T] 对象，其中 T 是初始值 initialValue 的类型。Spark闭包里的执行器代码可以使用累加器的 += 方法(在Java中是 add)增加累加器的值。 驱动器程序可以调用累加器的value属性(在Java中使用value()或setValue())来访问累加器的值。
  注意：工作节点上的任务不能访问累加器的值。从这些任务的角度来看，累加器是一个只写变量。
  对于要在行动操作中使用的累加器，Spark只会把每个任务对各累加器的修改应用一次。因此，如果想要一个无论在失败还是重复计算时都绝对可靠的累加器，我们必须把它放在 foreach() 这样的行动操作中。转化操作中累加器可能会发生不止一次更新
  5.1.2 自定义累加器
  自定义累加器类型的功能在1.X版本中就已经提供了，但是使用起来比较麻烦，在2.0版本后，累加器的易用性有了较大的改进，而且官方还提供了一个新的抽象类：AccumulatorV2来提供更加友好的自定义类型累加器的实现方式。实现自定义类型累加器需要继承AccumulatorV2并至少覆写下例中出现的方法，下面这个累加器可以用于在程序运行过程中收集一些文本类信息，最终以Set[String]的形式返回。1
  package com.atguigu.spark

  import org.apache.spark.util.AccumulatorV2
  import org.apache.spark.{SparkConf, SparkContext}
  import scala.collection.JavaConversions._

  class LogAccumulator extends org.apache.spark.util.AccumulatorV2[String, java.util.Set[String]] {
    private val _logArray: java.util.Set[String] = new java.util.HashSet[String]()

    override def isZero: Boolean = {
      _logArray.isEmpty
    }

    override def reset(): Unit = {
      _logArray.clear()
    }

    override def add(v: String): Unit = {
      _logArray.add(v)
    }

    override def merge(other: org.apache.spark.util.AccumulatorV2[String, java.util.Set[String]]): Unit = {
      other match {
        case o: LogAccumulator => _logArray.addAll(o.value)
      }

    }

    override def value: java.util.Set[String] = {
      java.util.Collections.unmodifiableSet(_logArray)
    }

    override def copy():org.apache.spark.util.AccumulatorV2[String, java.util.Set[String]] = {
      val newAcc = new LogAccumulator()
      _logArray.synchronized{
        newAcc._logArray.addAll(_logArray)
      }
      newAcc
    }
  }

  // 过滤掉带字母的
  object LogAccumulator {
    def main(args: Array[String]) {
      val conf=new SparkConf().setAppName("LogAccumulator")
      val sc=new SparkContext(conf)

      val accum = new LogAccumulator
      sc.register(accum, "logAccum")
      val sum = sc.parallelize(Array("1", "2a", "3", "4b", "5", "6", "7cd", "8", "9"), 2).filter(line => {
        val pattern = """^-?(\d+)"""
        val flag = line.matches(pattern)
        if (!flag) {
          accum.add(line)
        }
        flag
      }).map(_.toInt).reduce(_ + _)

      println("sum: " + sum)
      for (v <- accum.value) print(v + "")
      println()
      sc.stop()
    }
  }
  ## 广播变量（调优策略）
  广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个或多个Spark操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，甚至是机器学习算法中的一个很大的特征向量，广播变量用起来都很顺手。 在多个并行操作中使用同一个变量，但是 Spark会为每个任务分别发送。
  scala> val broadcastVar = sc.broadcast(Array(1, 2, 3))
  broadcastVar: org.apache.spark.broadcast.Broadcast[Array[Int]] = Broadcast(35)

  scala> broadcastVar.value
  res33: Array[Int] = Array(1, 2, 3)
  使用广播变量的过程如下：
  1. 通过对一个类型 T 的对象调用 SparkContext.broadcast 创建出一个 Broadcast[T] 对象。 任何可序列化的类型都可以这么实现。
  2. 通过 value 属性访问该对象的值(在 Java 中为 value() 方法)。
  3. 变量只会被发到各个节点一次，应作为只读值处理(修改这个值不会影响到别的节点)。
